From 0ddfeb1fa7f353dea40c59b75cacd133cbc33122 Mon Sep 17 00:00:00 2001
From: akhila-guruju <v-guakhila@microsoft.com>
Date: Sat, 28 Jun 2025 08:43:34 +0000
Subject: [PATCH] Address CVE-2025-5455

Upstream Patch reference: https://codereview.qt-project.org/c/qt/qtbase/+/642006/7/src/corelib/io/qdataurl.cpp#b50

---
 src/corelib/io/qdataurl.cpp       | 12 +++++++-----
 src/corelib/text/qbytearrayview.h |  6 ++++++
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/corelib/io/qdataurl.cpp b/src/corelib/io/qdataurl.cpp
index 92c6f541..e5f6f549 100644
--- a/src/corelib/io/qdataurl.cpp
+++ b/src/corelib/io/qdataurl.cpp
@@ -41,11 +41,13 @@ Q_CORE_EXPORT bool qDecodeDataUrl(const QUrl &uri, QString &mimeType, QByteArray
             data.chop(7);
         }
 
-        if (QLatin1StringView{data}.startsWith("charset"_L1, Qt::CaseInsensitive)) {
-            qsizetype i = 7;      // strlen("charset")
-            while (data.at(i) == ' ')
-                ++i;
-            if (data.at(i) == '=')
+        QLatin1StringView textPlain;
+        constexpr auto charset = "charset"_L1;
+        if (QLatin1StringView{data}.startsWith(charset, Qt::CaseInsensitive)) {
+            QByteArrayView copy = data.sliced(charset.size());
+            while (copy.startsWith(' '))
+                copy.slice(1);
+            if (copy.startsWith('='))
                 data.prepend("text/plain;");
         }
 
diff --git a/src/corelib/text/qbytearrayview.h b/src/corelib/text/qbytearrayview.h
index f822a2ca..1fd0d0c3 100644
--- a/src/corelib/text/qbytearrayview.h
+++ b/src/corelib/text/qbytearrayview.h
@@ -195,6 +195,12 @@ public:
     { Q_ASSERT(pos >= 0); Q_ASSERT(pos <= size()); return QByteArrayView(data() + pos, size() - pos); }
     [[nodiscard]] constexpr QByteArrayView sliced(qsizetype pos, qsizetype n) const
     { Q_ASSERT(pos >= 0); Q_ASSERT(n >= 0); Q_ASSERT(size_t(pos) + size_t(n) <= size_t(size())); return QByteArrayView(data() + pos, n); }
+
+     constexpr QByteArrayView &slice(qsizetype pos)
+    { *this = sliced(pos); return *this; }
+     constexpr QByteArrayView &slice(qsizetype pos, qsizetype n)
+    { *this = sliced(pos, n); return *this; }
+
     [[nodiscard]] constexpr QByteArrayView chopped(qsizetype len) const
     { Q_ASSERT(len >= 0); Q_ASSERT(len <= size()); return first(size() - len); }
 
-- 
2.45.2

