From 0f47fb310717fdbf4d2708823f6974e6782ca7f3 Mon Sep 17 00:00:00 2001
From: akhila-guruju <v-guakhila@microsoft.com>
Date: Tue, 1 Jul 2025 11:07:04 +0000
Subject: [PATCH] Address CVE-2025-5455

Upstream Patch Reference:
 1. https://codereview.qt-project.org/c/qt/qtbase/+/642006/7/src/corelib/io/qdataurl.cpp
 2. for test: https://codereview.qt-project.org/c/qt/qtbase/+/642006/7/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp

---
 src/corelib/io/qdataurl.cpp                     | 13 +++++++------
 src/corelib/tools/qbytearray.h                  |  5 +++++
 tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp | 13 +++++++++++++
 3 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/src/corelib/io/qdataurl.cpp b/src/corelib/io/qdataurl.cpp
index 9cb1b9ab..d74fccb7 100644
--- a/src/corelib/io/qdataurl.cpp
+++ b/src/corelib/io/qdataurl.cpp
@@ -75,16 +75,17 @@ Q_CORE_EXPORT bool qDecodeDataUrl(const QUrl &uri, QString &mimeType, QByteArray
             data.chop(7);
         }
 
+	QLatin1String textPlain;
         if (data.toLower().startsWith("charset")) {
-            int i = 7;      // strlen("charset")
-            while (data.at(i) == ' ')
-                ++i;
-            if (data.at(i) == '=')
-                data.prepend("text/plain;");
+            QByteArray copy = data.sliced(7);      // strlen("charset")
+            while (copy.startsWith(' '))
+                copy.slice(1);
+            if (copy.startsWith('='))
+                textPlain = QLatin1String("text/plain;");
         }
 
         if (!data.isEmpty())
-            mimeType = QLatin1String(data.trimmed());
+            mimeType = textPlain + QLatin1String(data.trimmed());
 
     }
 
diff --git a/src/corelib/tools/qbytearray.h b/src/corelib/tools/qbytearray.h
index 8ee3a29e..576de8e4 100644
--- a/src/corelib/tools/qbytearray.h
+++ b/src/corelib/tools/qbytearray.h
@@ -240,6 +240,11 @@ public:
     Q_REQUIRED_RESULT QByteArray mid(int index, int len = -1) const;
     Q_REQUIRED_RESULT QByteArray chopped(int len) const
     { Q_ASSERT(len >= 0); Q_ASSERT(len <= size()); return left(size() - len); }
+    Q_REQUIRED_RESULT QByteArray sliced(qsizetype pos) const
+    { Q_ASSERT(pos >= 0); Q_ASSERT(pos <= size()); return QByteArray(data() + pos, size() - pos); }
+
+    QByteArray &slice(qsizetype pos)
+    { *this = sliced(pos); return *this; }
 
     bool startsWith(const QByteArray &a) const;
     bool startsWith(char c) const;
diff --git a/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp b/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp
index 66720d28..a236a0dc 100644
--- a/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp
+++ b/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp
@@ -38,6 +38,7 @@ private slots:
     void nonData();
     void emptyData();
     void alreadyPercentageEncoded();
+    void prematureCharsetEnd();
 };
 
 void tst_QDataUrl::nonData()
@@ -74,5 +75,17 @@ void tst_QDataUrl::alreadyPercentageEncoded()
     QCOMPARE(payload, QByteArray::fromPercentEncoding("%E2%88%9A"));
 }
 
+void tst_QDataUrl::prematureCharsetEnd()
+{
+    QLatin1String data("data:charset,");
+    QUrl url(data);
+    QString mimeType;
+    QByteArray payload;
+    bool result = qDecodeDataUrl(url, mimeType, payload);
+    QVERIFY(result);
+    QCOMPARE(mimeType, QLatin1String("charset"));
+    QVERIFY(payload.isEmpty());
+}
+
 QTEST_MAIN(tst_QDataUrl)
 #include "tst_qdataurl.moc"
-- 
2.45.2

